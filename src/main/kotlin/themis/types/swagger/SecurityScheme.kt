package themis.types.swagger

/**
 * Defines a security scheme that can be used by the operations.
 * Supported schemes are HTTP authentication, an API key (either as
 * a header, a cookie parameter or as a query parameter), OAuth2's
 * common flows (implicit, password, client credentials and
 * authorization code) as defined in
 * [RFC6749](https://tools.ietf.org/html/rfc6749), and
 * [OpenID Connect Discovery](https://tools.ietf.org/html/draft-ietf-oauth-discovery-06).
 */
data class SecurityScheme(
  /**
   * The type of the security scheme. Valid values are "apiKey",
   * "http", "oauth2", "openIdConnect".
   */
  val type: String,
  /**
   * A short description for security scheme.
   * [CommonMark syntax](https://spec.commonmark.org/) MAY be used for rich
   * text representation.
   */
  var description: String? = null,
  /**
   * The name of the header, query or cookie parameter to be
   * used.
   * ___
   * **APPLIES** to and **REQUIRED** for *`"apiKey"`*
   */
  var name: String? = null,
  /**
   * The location of the API key. Valid values are "query",
   * "header" or "cookie".
   * ___
   * **APPLIES** to and **REQUIRED** for *`"apiKey"`*
   */
  var `in`: String? = null,
  /**
   * The name of the HTTP Authorization scheme to be used in the
   * [Authorization header as defined in RFC7235](https://tools.ietf.org/html/rfc7235#section-5.1).
   * The values used SHOULD be registered in the
   * [IANA Authentication Scheme registry](https://www.iana.org/assignments/http-authschemes/http-authschemes.xhtml).
   * ___
   * **APPLIES** to and **REQUIRED** for *`"http"`*
   */
  var scheme: String? = null,
  /**
   * A hint to the client to identify how the bearer token is
   * formatted. Bearer tokens are usually generated by an
   * authorization server, so this information is primarily for
   * documentation purposes.
   * ___
   * **APPLIES** to *`"http" ("bearer")`*
   */
  var bearerFormat: String? = null,
  /**
   * An object containing configuration information for the flow
   * themis supported.
   * ___
   * **APPLIES** to and **REQUIRED** for *`"oauth2"`*
   */
  var flows: OAuthFlows? = null,
  /**
   * OpenId Connect URL to discover OAuth2 configuration values.
   * This MUST be in the form of a URL.
   * ___
   * **APPLIES** to and **REQUIRED** for *`"openIdConnect"`*
   */
  var openIdConnectUrl: String? = null,
) { val o = this }